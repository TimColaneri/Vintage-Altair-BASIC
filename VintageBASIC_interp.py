# Timothy Colaneri
# Vintage Basic Interpreter driver
# CSC402 Project; Fall 2019

from VintageBASIC_lex import lexer
from VintageBASIC_frontend_gram import parser
from VintageBASIC_state import state
from VintageBASIC_walk import walk
from helper_functions import quicksort, splitProg

def interp_program():

    state.instr_ix = 0 # Holds current index in instruction list
    
    # iterate through instruction list generated by input program
    while True:

        # If we did the last instruction, we are done
        # else continue processing
        if state.instr_ix >= len(state.instr_list):
            break
        else:
            instr = state.instr_list[state.instr_ix]

        walk(instr)
        state.instr_ix += 1

def interp(input_stream):

    # First step for this interpreter is to split the input program
    # into two lists:
    # -Labels list
    # -Instructions list
    # This allows us to index different lines within the input program
    # We also sort the instructions for easier processing in an
    # imperative environment
    input_stream = splitProg(input_stream)

    # initialize state object
    state.initialize()

    # Parse the input program
    parser.parse(input_stream, lexer=lexer)

    # We built the list backwards when we initially read and sort it
    # Reverse lists for easier processing
    state.instr_labels.reverse()
    state.instr_list.reverse()

    # interpret the program
    interp_program()

##############################  TESTING  ###################################
progOne = \
'''
01 PRINT "RUSSIAN ROULETTE"
02 PRINT "CREATIVE COMPUTING   MORRISTOWN, NEW JERSEY"
03 PRINT " " : PRINT " " : PRINT " "
04 PRINT "This is a game of >>>>>>>>> Russian Roulette."
10 PRINT " " : PRINT "Here is a revolver."
20 PRINT "Type '1' to spin the chamber and pull the trigger."
22 PRINT "Type '2' to give up."
23 PRINT "GO"
25 LET n = 0
30 INPUT ; i
31 IF i <> 2 THEN 35
32 PRINT "       Chicken!!!!!"
33 GOTO 72
35 LET n = n + 1
40 IF RND(1) > 0.83333 THEN 70
45 IF n > 10 THEN 80
50 PRINT " - Click - "
60 PRINT " " : GOTO 30
70 PRINT "     BANG!!!!!! You're dead!"
71 PRINT "Condolences will be sent to your relatives."
72 PRINT " " : PRINT " " : PRINT " "
75 PRINT "...next victim..." : GOTO 20
80 PRINT "You Win!!!!!"
85 PRINT "Let someone else blow thier brains out."
90 GOTO 10
99 END
'''
progTwo = \
'''
05 def fn fun ( a ) = a + 1
10 for x = 0 to 19 step 2
20 print fun(x)
30 next x
'''
progThree = \
'''
10 FOR x = 0 TO 10 STEP 1 : PRINT x : PRINT " *" : NEXT x
20 PRINT "asdf"
'''
#interp(progThree)

#print(state.symbol_table.get_config())
#print(state.instr_list)
#print(state.value_list.get())
#print(state.instr_labels)
